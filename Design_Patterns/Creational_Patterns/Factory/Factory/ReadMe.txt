設計原則:
由一個工廠物件決定創建出哪一種產品類的例項，它經常被用於封裝建立物件的程式碼。

動機(Motivation):
將產生物件的選擇邏輯放於子類別中

意圖(Intent):
創建物件而不將建立邏輯邏輯暴露給客戶端。
通過共用方法創建物件

適用場景(Applicability):
當無法預期應該建立的物件類型時
當一個物件希望其子物件成為特定於新建立物件的子物件時

如:
根據文件類型建立不同文件(PDF、Excel、Word)

架構(Structure): 如 FactoryPattern.png 圖片

參與者(Participants): 如 Factory.png 圖片

互動(Collaboration):

透過 ITrainingCamp 介面集合建立對應的冒險者類別，解決簡單工廠破壞了開放/封閉原則的問題。

後果(Consequences):
簡單工廠模式因為只有一個工廠，要新增產品種類要直接修改工廠類別裡面的程式碼，
直接破壞了開放/封閉原則，在工廠模式中，我們將工廠(Factory)提升為一種抽象的概念，
也就是說現在工廠是一個介面(Interface)，工廠介面只會規範實體工廠類別(Concrete Factory)應該返回哪種產品，
實際上要如何製作產品則交給實體工廠來實作。