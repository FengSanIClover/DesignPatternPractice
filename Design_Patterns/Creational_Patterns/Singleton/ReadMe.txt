設計原則:
保證一個類別只會產生一個物件，而且要提供存取該物件的統一方法

動機(Motivation):
有時我們只希望一個類別的單個實體存在於系統中
例如，我們只需要一個窗口經理或一個工廠來生產一系列產品。
我們需要使一個實體易於訪問
並且我們要確保不能創建該類別的其他實體

意圖(Intent):
單例模式可確保應用程式中僅存在一個類別。

適用場景(Applicability):
該類別應該只有一個實體，可以從該類別中的方法訪問該實體。

系統只需要一個實體，需要考慮資源消耗太大而只允許創建一個實體
如
1.資源管理器
2.網站的計數器
3.IO訪問
4.資料庫訪問


架構(Structure): 如 CompositePattern.png 圖片

參與者(Participants): 如 Singleton.png 圖片

互動(Collaboration):
程式一開始建立 2 網站計數器的類別 WebBrowserCounter，並模擬瀏覽次數增加，
同一網站的計數器應該是同步計數的，結果並非預期結果，
建立套用單例模式的網站計數器類別 WebBrowserCounter_Singleton，並重新模擬情境，結果為預期結果。

後果(Consequences):
優點
只有一個物件，減少記憶體的佔用，特別建立物件和銷毀物件比較耗時耗效能的情況下更加合適。
可以很方便的做到單執行緒的讀寫，比如寫檔案避免兩個物件同時操作引發一些異常。
不會頻繁的建立和銷毀物件，減少頻繁GC

缺點
不能很好的進行擴充套件，每次新加功能都需要修改原類。